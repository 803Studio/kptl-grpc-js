// source: employee/employee.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var global_headers_pb = require('../global/headers_pb.js');
goog.object.extend(proto, global_headers_pb);
goog.exportSymbol('proto.employee.FindEmployeeInfoReq', null, global);
goog.exportSymbol('proto.employee.FindEmployeeResponse', null, global);
goog.exportSymbol('proto.employee.FindEmployeeSimpleResponse', null, global);
goog.exportSymbol('proto.employee.FindRecordsReq', null, global);
goog.exportSymbol('proto.employee.JobType', null, global);
goog.exportSymbol('proto.employee.OperateRequest', null, global);
goog.exportSymbol('proto.employee.OperateResponse', null, global);
goog.exportSymbol('proto.employee.SelfInformation', null, global);
goog.exportSymbol('proto.employee.SimpleInformation', null, global);
goog.exportSymbol('proto.employee.SplitPage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.OperateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.OperateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.OperateRequest.displayName = 'proto.employee.OperateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.FindRecordsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.FindRecordsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.FindRecordsReq.displayName = 'proto.employee.FindRecordsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.SelfInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.SelfInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.SelfInformation.displayName = 'proto.employee.SelfInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.SimpleInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.SimpleInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.SimpleInformation.displayName = 'proto.employee.SimpleInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.FindEmployeeInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.FindEmployeeInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.FindEmployeeInfoReq.displayName = 'proto.employee.FindEmployeeInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.SplitPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.SplitPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.SplitPage.displayName = 'proto.employee.SplitPage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.FindEmployeeSimpleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.employee.FindEmployeeSimpleResponse.repeatedFields_, null);
};
goog.inherits(proto.employee.FindEmployeeSimpleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.FindEmployeeSimpleResponse.displayName = 'proto.employee.FindEmployeeSimpleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.FindEmployeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.employee.FindEmployeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.FindEmployeeResponse.displayName = 'proto.employee.FindEmployeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.employee.OperateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.employee.OperateResponse.repeatedFields_, null);
};
goog.inherits(proto.employee.OperateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.employee.OperateResponse.displayName = 'proto.employee.OperateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.OperateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.OperateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.OperateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.OperateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jobid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.OperateRequest}
 */
proto.employee.OperateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.OperateRequest;
  return proto.employee.OperateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.OperateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.OperateRequest}
 */
proto.employee.OperateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.OperateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.OperateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.OperateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.OperateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJobid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.employee.OperateRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.OperateRequest} returns this
 */
proto.employee.OperateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 jobId = 2;
 * @return {number}
 */
proto.employee.OperateRequest.prototype.getJobid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.OperateRequest} returns this
 */
proto.employee.OperateRequest.prototype.setJobid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.FindRecordsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.FindRecordsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.FindRecordsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindRecordsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.FindRecordsReq}
 */
proto.employee.FindRecordsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.FindRecordsReq;
  return proto.employee.FindRecordsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.FindRecordsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.FindRecordsReq}
 */
proto.employee.FindRecordsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.FindRecordsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.FindRecordsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.FindRecordsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindRecordsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.employee.FindRecordsReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.FindRecordsReq} returns this
 */
proto.employee.FindRecordsReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.SelfInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.SelfInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.SelfInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SelfInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleinfo: (f = msg.getSimpleinfo()) && proto.employee.SimpleInformation.toObject(includeInstance, f),
    ismarry: jspb.Message.getFieldWithDefault(msg, 2, 0),
    education: jspb.Message.getFieldWithDefault(msg, 3, 0),
    jobstatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    home: jspb.Message.getFieldWithDefault(msg, 5, ""),
    expectmoney: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.SelfInformation}
 */
proto.employee.SelfInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.SelfInformation;
  return proto.employee.SelfInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.SelfInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.SelfInformation}
 */
proto.employee.SelfInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.employee.SimpleInformation;
      reader.readMessage(value,proto.employee.SimpleInformation.deserializeBinaryFromReader);
      msg.setSimpleinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsmarry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEducation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobstatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHome(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpectmoney(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.SelfInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.SelfInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.SelfInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SelfInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.employee.SimpleInformation.serializeBinaryToWriter
    );
  }
  f = message.getIsmarry();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEducation();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getJobstatus();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHome();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExpectmoney();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional SimpleInformation simpleInfo = 1;
 * @return {?proto.employee.SimpleInformation}
 */
proto.employee.SelfInformation.prototype.getSimpleinfo = function() {
  return /** @type{?proto.employee.SimpleInformation} */ (
    jspb.Message.getWrapperField(this, proto.employee.SimpleInformation, 1));
};


/**
 * @param {?proto.employee.SimpleInformation|undefined} value
 * @return {!proto.employee.SelfInformation} returns this
*/
proto.employee.SelfInformation.prototype.setSimpleinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.clearSimpleinfo = function() {
  return this.setSimpleinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.employee.SelfInformation.prototype.hasSimpleinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 isMarry = 2;
 * @return {number}
 */
proto.employee.SelfInformation.prototype.getIsmarry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.setIsmarry = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 education = 3;
 * @return {number}
 */
proto.employee.SelfInformation.prototype.getEducation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.setEducation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 jobStatus = 4;
 * @return {number}
 */
proto.employee.SelfInformation.prototype.getJobstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.setJobstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string home = 5;
 * @return {string}
 */
proto.employee.SelfInformation.prototype.getHome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.setHome = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 expectMoney = 6;
 * @return {number}
 */
proto.employee.SelfInformation.prototype.getExpectmoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SelfInformation} returns this
 */
proto.employee.SelfInformation.prototype.setExpectmoney = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.SimpleInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.SimpleInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.SimpleInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SimpleInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    workyear: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expectedlocation: jspb.Message.getFieldWithDefault(msg, 5, ""),
    industry: jspb.Message.getFieldWithDefault(msg, 6, ""),
    jobtype: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.SimpleInformation}
 */
proto.employee.SimpleInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.SimpleInformation;
  return proto.employee.SimpleInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.SimpleInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.SimpleInformation}
 */
proto.employee.SimpleInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkyear(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpectedlocation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndustry(value);
      break;
    case 7:
      var value = /** @type {!proto.employee.JobType} */ (reader.readEnum());
      msg.setJobtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.SimpleInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.SimpleInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.SimpleInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SimpleInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRealname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWorkyear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getExpectedlocation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIndustry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getJobtype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.employee.SimpleInformation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string realName = 2;
 * @return {string}
 */
proto.employee.SimpleInformation.prototype.getRealname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setRealname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sex = 3;
 * @return {number}
 */
proto.employee.SimpleInformation.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setSex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 workYear = 4;
 * @return {number}
 */
proto.employee.SimpleInformation.prototype.getWorkyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setWorkyear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string expectedLocation = 5;
 * @return {string}
 */
proto.employee.SimpleInformation.prototype.getExpectedlocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setExpectedlocation = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string industry = 6;
 * @return {string}
 */
proto.employee.SimpleInformation.prototype.getIndustry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setIndustry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional JobType jobType = 7;
 * @return {!proto.employee.JobType}
 */
proto.employee.SimpleInformation.prototype.getJobtype = function() {
  return /** @type {!proto.employee.JobType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.employee.JobType} value
 * @return {!proto.employee.SimpleInformation} returns this
 */
proto.employee.SimpleInformation.prototype.setJobtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.FindEmployeeInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.FindEmployeeInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.FindEmployeeInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.FindEmployeeInfoReq}
 */
proto.employee.FindEmployeeInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.FindEmployeeInfoReq;
  return proto.employee.FindEmployeeInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.FindEmployeeInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.FindEmployeeInfoReq}
 */
proto.employee.FindEmployeeInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.FindEmployeeInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.FindEmployeeInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.FindEmployeeInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.employee.FindEmployeeInfoReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.FindEmployeeInfoReq} returns this
 */
proto.employee.FindEmployeeInfoReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.SplitPage.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.SplitPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.SplitPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SplitPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.SplitPage}
 */
proto.employee.SplitPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.SplitPage;
  return proto.employee.SplitPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.SplitPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.SplitPage}
 */
proto.employee.SplitPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.SplitPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.SplitPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.SplitPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.SplitPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.employee.SplitPage.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SplitPage} returns this
 */
proto.employee.SplitPage.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.employee.SplitPage.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.employee.SplitPage} returns this
 */
proto.employee.SplitPage.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.employee.FindEmployeeSimpleResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.FindEmployeeSimpleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.FindEmployeeSimpleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeSimpleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && global_headers_pb.ResponseHeader.toObject(includeInstance, f),
    employeesList: jspb.Message.toObjectList(msg.getEmployeesList(),
    proto.employee.SimpleInformation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.FindEmployeeSimpleResponse}
 */
proto.employee.FindEmployeeSimpleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.FindEmployeeSimpleResponse;
  return proto.employee.FindEmployeeSimpleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.FindEmployeeSimpleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.FindEmployeeSimpleResponse}
 */
proto.employee.FindEmployeeSimpleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new global_headers_pb.ResponseHeader;
      reader.readMessage(value,global_headers_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.employee.SimpleInformation;
      reader.readMessage(value,proto.employee.SimpleInformation.deserializeBinaryFromReader);
      msg.addEmployees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.FindEmployeeSimpleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.FindEmployeeSimpleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeSimpleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      global_headers_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getEmployeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.employee.SimpleInformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional global.ResponseHeader header = 1;
 * @return {?proto.global.ResponseHeader}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.getHeader = function() {
  return /** @type{?proto.global.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, global_headers_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.global.ResponseHeader|undefined} value
 * @return {!proto.employee.FindEmployeeSimpleResponse} returns this
*/
proto.employee.FindEmployeeSimpleResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.employee.FindEmployeeSimpleResponse} returns this
 */
proto.employee.FindEmployeeSimpleResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SimpleInformation employees = 2;
 * @return {!Array<!proto.employee.SimpleInformation>}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.getEmployeesList = function() {
  return /** @type{!Array<!proto.employee.SimpleInformation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.employee.SimpleInformation, 2));
};


/**
 * @param {!Array<!proto.employee.SimpleInformation>} value
 * @return {!proto.employee.FindEmployeeSimpleResponse} returns this
*/
proto.employee.FindEmployeeSimpleResponse.prototype.setEmployeesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.employee.SimpleInformation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.employee.SimpleInformation}
 */
proto.employee.FindEmployeeSimpleResponse.prototype.addEmployees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.employee.SimpleInformation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.employee.FindEmployeeSimpleResponse} returns this
 */
proto.employee.FindEmployeeSimpleResponse.prototype.clearEmployeesList = function() {
  return this.setEmployeesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.FindEmployeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.FindEmployeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.FindEmployeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && global_headers_pb.ResponseHeader.toObject(includeInstance, f),
    selfinfo: (f = msg.getSelfinfo()) && proto.employee.SelfInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.FindEmployeeResponse}
 */
proto.employee.FindEmployeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.FindEmployeeResponse;
  return proto.employee.FindEmployeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.FindEmployeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.FindEmployeeResponse}
 */
proto.employee.FindEmployeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new global_headers_pb.ResponseHeader;
      reader.readMessage(value,global_headers_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.employee.SelfInformation;
      reader.readMessage(value,proto.employee.SelfInformation.deserializeBinaryFromReader);
      msg.setSelfinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.FindEmployeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.FindEmployeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.FindEmployeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.FindEmployeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      global_headers_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getSelfinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.employee.SelfInformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional global.ResponseHeader header = 1;
 * @return {?proto.global.ResponseHeader}
 */
proto.employee.FindEmployeeResponse.prototype.getHeader = function() {
  return /** @type{?proto.global.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, global_headers_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.global.ResponseHeader|undefined} value
 * @return {!proto.employee.FindEmployeeResponse} returns this
*/
proto.employee.FindEmployeeResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.employee.FindEmployeeResponse} returns this
 */
proto.employee.FindEmployeeResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.employee.FindEmployeeResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SelfInformation selfInfo = 2;
 * @return {?proto.employee.SelfInformation}
 */
proto.employee.FindEmployeeResponse.prototype.getSelfinfo = function() {
  return /** @type{?proto.employee.SelfInformation} */ (
    jspb.Message.getWrapperField(this, proto.employee.SelfInformation, 2));
};


/**
 * @param {?proto.employee.SelfInformation|undefined} value
 * @return {!proto.employee.FindEmployeeResponse} returns this
*/
proto.employee.FindEmployeeResponse.prototype.setSelfinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.employee.FindEmployeeResponse} returns this
 */
proto.employee.FindEmployeeResponse.prototype.clearSelfinfo = function() {
  return this.setSelfinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.employee.FindEmployeeResponse.prototype.hasSelfinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.employee.OperateResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.employee.OperateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.employee.OperateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.employee.OperateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.OperateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && global_headers_pb.ResponseHeader.toObject(includeInstance, f),
    jobidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.employee.OperateResponse}
 */
proto.employee.OperateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.employee.OperateResponse;
  return proto.employee.OperateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.employee.OperateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.employee.OperateResponse}
 */
proto.employee.OperateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new global_headers_pb.ResponseHeader;
      reader.readMessage(value,global_headers_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJobids(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.employee.OperateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.employee.OperateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.employee.OperateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.employee.OperateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      global_headers_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getJobidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional global.ResponseHeader header = 1;
 * @return {?proto.global.ResponseHeader}
 */
proto.employee.OperateResponse.prototype.getHeader = function() {
  return /** @type{?proto.global.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, global_headers_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.global.ResponseHeader|undefined} value
 * @return {!proto.employee.OperateResponse} returns this
*/
proto.employee.OperateResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.employee.OperateResponse} returns this
 */
proto.employee.OperateResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.employee.OperateResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 jobIds = 2;
 * @return {!Array<number>}
 */
proto.employee.OperateResponse.prototype.getJobidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.employee.OperateResponse} returns this
 */
proto.employee.OperateResponse.prototype.setJobidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.employee.OperateResponse} returns this
 */
proto.employee.OperateResponse.prototype.addJobids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.employee.OperateResponse} returns this
 */
proto.employee.OperateResponse.prototype.clearJobidsList = function() {
  return this.setJobidsList([]);
};


/**
 * @enum {number}
 */
proto.employee.JobType = {
  LONG: 0,
  SHORT: 1,
  PARTTIMEJOB: 2
};

goog.object.extend(exports, proto.employee);
