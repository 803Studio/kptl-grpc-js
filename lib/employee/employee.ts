/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: employee/employee.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../global/headers";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace employee {
    export enum JobType {
        LONG = 0,
        SHORT = 1,
        PARTTIMEJOB = 2
    }
    export class OperateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            jobId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("jobId" in data && data.jobId != undefined) {
                    this.jobId = data.jobId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get jobId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set jobId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            jobId?: number;
        }): OperateRequest {
            const message = new OperateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.jobId != null) {
                message.jobId = data.jobId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                jobId?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.jobId != null) {
                data.jobId = this.jobId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.jobId != 0)
                writer.writeInt32(2, this.jobId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.jobId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperateRequest {
            return OperateRequest.deserialize(bytes);
        }
    }
    export class FindRecordsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): FindRecordsReq {
            const message = new FindRecordsReq({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindRecordsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindRecordsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindRecordsReq {
            return FindRecordsReq.deserialize(bytes);
        }
    }
    export class SelfInformation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            simpleInfo?: SimpleInformation;
            isMarry?: number;
            education?: number;
            jobStatus?: number;
            home?: string;
            expectMoney?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("simpleInfo" in data && data.simpleInfo != undefined) {
                    this.simpleInfo = data.simpleInfo;
                }
                if ("isMarry" in data && data.isMarry != undefined) {
                    this.isMarry = data.isMarry;
                }
                if ("education" in data && data.education != undefined) {
                    this.education = data.education;
                }
                if ("jobStatus" in data && data.jobStatus != undefined) {
                    this.jobStatus = data.jobStatus;
                }
                if ("home" in data && data.home != undefined) {
                    this.home = data.home;
                }
                if ("expectMoney" in data && data.expectMoney != undefined) {
                    this.expectMoney = data.expectMoney;
                }
            }
        }
        get simpleInfo() {
            return pb_1.Message.getWrapperField(this, SimpleInformation, 1) as SimpleInformation;
        }
        set simpleInfo(value: SimpleInformation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_simpleInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get isMarry() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set isMarry(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get education() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set education(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get jobStatus() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set jobStatus(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get home() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set home(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get expectMoney() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set expectMoney(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            simpleInfo?: ReturnType<typeof SimpleInformation.prototype.toObject>;
            isMarry?: number;
            education?: number;
            jobStatus?: number;
            home?: string;
            expectMoney?: number;
        }): SelfInformation {
            const message = new SelfInformation({});
            if (data.simpleInfo != null) {
                message.simpleInfo = SimpleInformation.fromObject(data.simpleInfo);
            }
            if (data.isMarry != null) {
                message.isMarry = data.isMarry;
            }
            if (data.education != null) {
                message.education = data.education;
            }
            if (data.jobStatus != null) {
                message.jobStatus = data.jobStatus;
            }
            if (data.home != null) {
                message.home = data.home;
            }
            if (data.expectMoney != null) {
                message.expectMoney = data.expectMoney;
            }
            return message;
        }
        toObject() {
            const data: {
                simpleInfo?: ReturnType<typeof SimpleInformation.prototype.toObject>;
                isMarry?: number;
                education?: number;
                jobStatus?: number;
                home?: string;
                expectMoney?: number;
            } = {};
            if (this.simpleInfo != null) {
                data.simpleInfo = this.simpleInfo.toObject();
            }
            if (this.isMarry != null) {
                data.isMarry = this.isMarry;
            }
            if (this.education != null) {
                data.education = this.education;
            }
            if (this.jobStatus != null) {
                data.jobStatus = this.jobStatus;
            }
            if (this.home != null) {
                data.home = this.home;
            }
            if (this.expectMoney != null) {
                data.expectMoney = this.expectMoney;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_simpleInfo)
                writer.writeMessage(1, this.simpleInfo, () => this.simpleInfo.serialize(writer));
            if (this.isMarry != 0)
                writer.writeInt32(2, this.isMarry);
            if (this.education != 0)
                writer.writeInt32(3, this.education);
            if (this.jobStatus != 0)
                writer.writeInt32(4, this.jobStatus);
            if (this.home.length)
                writer.writeString(5, this.home);
            if (this.expectMoney != 0)
                writer.writeInt32(6, this.expectMoney);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SelfInformation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SelfInformation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.simpleInfo, () => message.simpleInfo = SimpleInformation.deserialize(reader));
                        break;
                    case 2:
                        message.isMarry = reader.readInt32();
                        break;
                    case 3:
                        message.education = reader.readInt32();
                        break;
                    case 4:
                        message.jobStatus = reader.readInt32();
                        break;
                    case 5:
                        message.home = reader.readString();
                        break;
                    case 6:
                        message.expectMoney = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SelfInformation {
            return SelfInformation.deserialize(bytes);
        }
    }
    export class SimpleInformation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            realName?: string;
            sex?: number;
            workYear?: number;
            expectedLocation?: string;
            industry?: string;
            jobType?: JobType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("realName" in data && data.realName != undefined) {
                    this.realName = data.realName;
                }
                if ("sex" in data && data.sex != undefined) {
                    this.sex = data.sex;
                }
                if ("workYear" in data && data.workYear != undefined) {
                    this.workYear = data.workYear;
                }
                if ("expectedLocation" in data && data.expectedLocation != undefined) {
                    this.expectedLocation = data.expectedLocation;
                }
                if ("industry" in data && data.industry != undefined) {
                    this.industry = data.industry;
                }
                if ("jobType" in data && data.jobType != undefined) {
                    this.jobType = data.jobType;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get realName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set realName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sex() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sex(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get workYear() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set workYear(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get expectedLocation() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set expectedLocation(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get industry() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set industry(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get jobType() {
            return pb_1.Message.getFieldWithDefault(this, 7, JobType.LONG) as JobType;
        }
        set jobType(value: JobType) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            realName?: string;
            sex?: number;
            workYear?: number;
            expectedLocation?: string;
            industry?: string;
            jobType?: JobType;
        }): SimpleInformation {
            const message = new SimpleInformation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.realName != null) {
                message.realName = data.realName;
            }
            if (data.sex != null) {
                message.sex = data.sex;
            }
            if (data.workYear != null) {
                message.workYear = data.workYear;
            }
            if (data.expectedLocation != null) {
                message.expectedLocation = data.expectedLocation;
            }
            if (data.industry != null) {
                message.industry = data.industry;
            }
            if (data.jobType != null) {
                message.jobType = data.jobType;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                realName?: string;
                sex?: number;
                workYear?: number;
                expectedLocation?: string;
                industry?: string;
                jobType?: JobType;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.realName != null) {
                data.realName = this.realName;
            }
            if (this.sex != null) {
                data.sex = this.sex;
            }
            if (this.workYear != null) {
                data.workYear = this.workYear;
            }
            if (this.expectedLocation != null) {
                data.expectedLocation = this.expectedLocation;
            }
            if (this.industry != null) {
                data.industry = this.industry;
            }
            if (this.jobType != null) {
                data.jobType = this.jobType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.realName.length)
                writer.writeString(2, this.realName);
            if (this.sex != 0)
                writer.writeInt32(3, this.sex);
            if (this.workYear != 0)
                writer.writeInt32(4, this.workYear);
            if (this.expectedLocation.length)
                writer.writeString(5, this.expectedLocation);
            if (this.industry.length)
                writer.writeString(6, this.industry);
            if (this.jobType != JobType.LONG)
                writer.writeEnum(7, this.jobType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleInformation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleInformation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.realName = reader.readString();
                        break;
                    case 3:
                        message.sex = reader.readInt32();
                        break;
                    case 4:
                        message.workYear = reader.readInt32();
                        break;
                    case 5:
                        message.expectedLocation = reader.readString();
                        break;
                    case 6:
                        message.industry = reader.readString();
                        break;
                    case 7:
                        message.jobType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimpleInformation {
            return SimpleInformation.deserialize(bytes);
        }
    }
    export class FindEmployeeInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): FindEmployeeInfoReq {
            const message = new FindEmployeeInfoReq({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindEmployeeInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindEmployeeInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindEmployeeInfoReq {
            return FindEmployeeInfoReq.deserialize(bytes);
        }
    }
    export class SplitPage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            index?: number;
            size?: number;
        }): SplitPage {
            const message = new SplitPage({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                size?: number;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeInt32(1, this.index);
            if (this.size != 0)
                writer.writeInt32(2, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SplitPage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SplitPage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readInt32();
                        break;
                    case 2:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SplitPage {
            return SplitPage.deserialize(bytes);
        }
    }
    export class FindEmployeeSimpleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
            employees?: SimpleInformation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("employees" in data && data.employees != undefined) {
                    this.employees = data.employees;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get employees() {
            return pb_1.Message.getRepeatedWrapperField(this, SimpleInformation, 2) as SimpleInformation[];
        }
        set employees(value: SimpleInformation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            employees?: ReturnType<typeof SimpleInformation.prototype.toObject>[];
        }): FindEmployeeSimpleResponse {
            const message = new FindEmployeeSimpleResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            if (data.employees != null) {
                message.employees = data.employees.map(item => SimpleInformation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
                employees?: ReturnType<typeof SimpleInformation.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.employees != null) {
                data.employees = this.employees.map((item: SimpleInformation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.employees.length)
                writer.writeRepeatedMessage(2, this.employees, (item: SimpleInformation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindEmployeeSimpleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindEmployeeSimpleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.employees, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SimpleInformation.deserialize(reader), SimpleInformation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindEmployeeSimpleResponse {
            return FindEmployeeSimpleResponse.deserialize(bytes);
        }
    }
    export class FindEmployeeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
            selfInfo?: SelfInformation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("selfInfo" in data && data.selfInfo != undefined) {
                    this.selfInfo = data.selfInfo;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get selfInfo() {
            return pb_1.Message.getWrapperField(this, SelfInformation, 2) as SelfInformation;
        }
        set selfInfo(value: SelfInformation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_selfInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            selfInfo?: ReturnType<typeof SelfInformation.prototype.toObject>;
        }): FindEmployeeResponse {
            const message = new FindEmployeeResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            if (data.selfInfo != null) {
                message.selfInfo = SelfInformation.fromObject(data.selfInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
                selfInfo?: ReturnType<typeof SelfInformation.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.selfInfo != null) {
                data.selfInfo = this.selfInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_selfInfo)
                writer.writeMessage(2, this.selfInfo, () => this.selfInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindEmployeeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindEmployeeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.selfInfo, () => message.selfInfo = SelfInformation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindEmployeeResponse {
            return FindEmployeeResponse.deserialize(bytes);
        }
    }
    export class OperateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
            jobIds?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("jobIds" in data && data.jobIds != undefined) {
                    this.jobIds = data.jobIds;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jobIds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set jobIds(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            jobIds?: number[];
        }): OperateResponse {
            const message = new OperateResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            if (data.jobIds != null) {
                message.jobIds = data.jobIds;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
                jobIds?: number[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.jobIds != null) {
                data.jobIds = this.jobIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.jobIds.length)
                writer.writePackedInt32(2, this.jobIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        message.jobIds = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperateResponse {
            return OperateResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEmployeeService {
        static definition = {
            deliver: {
                path: "/employee.Employee/deliver",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OperateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OperateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OperateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OperateResponse.deserialize(new Uint8Array(bytes))
            },
            browses: {
                path: "/employee.Employee/browses",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OperateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OperateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OperateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OperateResponse.deserialize(new Uint8Array(bytes))
            },
            deliverRecords: {
                path: "/employee.Employee/deliverRecords",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindRecordsReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindRecordsReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OperateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OperateResponse.deserialize(new Uint8Array(bytes))
            },
            completeSelfInformation: {
                path: "/employee.Employee/completeSelfInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SelfInformation) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SelfInformation.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.global.ResponseHeader) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.global.ResponseHeader.deserialize(new Uint8Array(bytes))
            },
            findEmployeeInformation: {
                path: "/employee.Employee/findEmployeeInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindEmployeeInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindEmployeeInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindEmployeeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindEmployeeResponse.deserialize(new Uint8Array(bytes))
            },
            findEmployeeSimpleInformation: {
                path: "/employee.Employee/findEmployeeSimpleInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SplitPage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SplitPage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindEmployeeSimpleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindEmployeeSimpleResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract deliver(call: grpc_1.ServerUnaryCall<OperateRequest, OperateResponse>, callback: grpc_1.sendUnaryData<OperateResponse>): void;
        abstract browses(call: grpc_1.ServerUnaryCall<OperateRequest, OperateResponse>, callback: grpc_1.sendUnaryData<OperateResponse>): void;
        abstract deliverRecords(call: grpc_1.ServerUnaryCall<FindRecordsReq, OperateResponse>, callback: grpc_1.sendUnaryData<OperateResponse>): void;
        abstract completeSelfInformation(call: grpc_1.ServerUnaryCall<SelfInformation, dependency_1.global.ResponseHeader>, callback: grpc_1.sendUnaryData<dependency_1.global.ResponseHeader>): void;
        abstract findEmployeeInformation(call: grpc_1.ServerUnaryCall<FindEmployeeInfoReq, FindEmployeeResponse>, callback: grpc_1.sendUnaryData<FindEmployeeResponse>): void;
        abstract findEmployeeSimpleInformation(call: grpc_1.ServerUnaryCall<SplitPage, FindEmployeeSimpleResponse>, callback: grpc_1.sendUnaryData<FindEmployeeSimpleResponse>): void;
    }
    export class EmployeeClient extends grpc_1.makeGenericClientConstructor(UnimplementedEmployeeService.definition, "Employee", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        deliver: GrpcUnaryServiceInterface<OperateRequest, OperateResponse> = (message: OperateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, callback?: grpc_1.requestCallback<OperateResponse>): grpc_1.ClientUnaryCall => {
            return super.deliver(message, metadata, options, callback);
        };
        browses: GrpcUnaryServiceInterface<OperateRequest, OperateResponse> = (message: OperateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, callback?: grpc_1.requestCallback<OperateResponse>): grpc_1.ClientUnaryCall => {
            return super.browses(message, metadata, options, callback);
        };
        deliverRecords: GrpcUnaryServiceInterface<FindRecordsReq, OperateResponse> = (message: FindRecordsReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, callback?: grpc_1.requestCallback<OperateResponse>): grpc_1.ClientUnaryCall => {
            return super.deliverRecords(message, metadata, options, callback);
        };
        completeSelfInformation: GrpcUnaryServiceInterface<SelfInformation, dependency_1.global.ResponseHeader> = (message: SelfInformation, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.global.ResponseHeader>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.global.ResponseHeader>, callback?: grpc_1.requestCallback<dependency_1.global.ResponseHeader>): grpc_1.ClientUnaryCall => {
            return super.completeSelfInformation(message, metadata, options, callback);
        };
        findEmployeeInformation: GrpcUnaryServiceInterface<FindEmployeeInfoReq, FindEmployeeResponse> = (message: FindEmployeeInfoReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindEmployeeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindEmployeeResponse>, callback?: grpc_1.requestCallback<FindEmployeeResponse>): grpc_1.ClientUnaryCall => {
            return super.findEmployeeInformation(message, metadata, options, callback);
        };
        findEmployeeSimpleInformation: GrpcUnaryServiceInterface<SplitPage, FindEmployeeSimpleResponse> = (message: SplitPage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindEmployeeSimpleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindEmployeeSimpleResponse>, callback?: grpc_1.requestCallback<FindEmployeeSimpleResponse>): grpc_1.ClientUnaryCall => {
            return super.findEmployeeSimpleInformation(message, metadata, options, callback);
        };
    }
}
