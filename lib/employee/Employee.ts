/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: employee/Employee.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace employee {
    export enum ResponseStatus {
        OK = 0,
        InternalErr = 1
    }
    export class OperateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            jobId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("jobId" in data && data.jobId != undefined) {
                    this.jobId = data.jobId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get jobId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set jobId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            jobId?: number;
        }): OperateRequest {
            const message = new OperateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.jobId != null) {
                message.jobId = data.jobId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                jobId?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.jobId != null) {
                data.jobId = this.jobId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.jobId != 0)
                writer.writeInt32(2, this.jobId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.jobId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperateRequest {
            return OperateRequest.deserialize(bytes);
        }
    }
    export class OperateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: ResponseHeader;
            jobIds?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("jobIds" in data && data.jobIds != undefined) {
                    this.jobIds = data.jobIds;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
        }
        set header(value: ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jobIds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set jobIds(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            jobIds?: number[];
        }): OperateResponse {
            const message = new OperateResponse({});
            if (data.header != null) {
                message.header = ResponseHeader.fromObject(data.header);
            }
            if (data.jobIds != null) {
                message.jobIds = data.jobIds;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
                jobIds?: number[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.jobIds != null) {
                data.jobIds = this.jobIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.jobIds.length)
                writer.writePackedInt32(2, this.jobIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        message.jobIds = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperateResponse {
            return OperateResponse.deserialize(bytes);
        }
    }
    export class ResponseHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: ResponseStatus;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, ResponseStatus.OK) as ResponseStatus;
        }
        set status(value: ResponseStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: ResponseStatus;
            message?: string;
        }): ResponseHeader {
            const message = new ResponseHeader({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ResponseStatus;
                message?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != ResponseStatus.OK)
                writer.writeEnum(1, this.status);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseHeader {
            return ResponseHeader.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEmployeeService {
        static definition = {
            Deliver: {
                path: "/employee.Employee/Deliver",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OperateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OperateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OperateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OperateResponse.deserialize(new Uint8Array(bytes))
            },
            Browses: {
                path: "/employee.Employee/Browses",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OperateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OperateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OperateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OperateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Deliver(call: grpc_1.ServerUnaryCall<OperateRequest, OperateResponse>, callback: grpc_1.sendUnaryData<OperateResponse>): void;
        abstract Browses(call: grpc_1.ServerUnaryCall<OperateRequest, OperateResponse>, callback: grpc_1.sendUnaryData<OperateResponse>): void;
    }
    export class EmployeeClient extends grpc_1.makeGenericClientConstructor(UnimplementedEmployeeService.definition, "Employee", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Deliver: GrpcUnaryServiceInterface<OperateRequest, OperateResponse> = (message: OperateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, callback?: grpc_1.requestCallback<OperateResponse>): grpc_1.ClientUnaryCall => {
            return super.Deliver(message, metadata, options, callback);
        };
        Browses: GrpcUnaryServiceInterface<OperateRequest, OperateResponse> = (message: OperateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OperateResponse>, callback?: grpc_1.requestCallback<OperateResponse>): grpc_1.ClientUnaryCall => {
            return super.Browses(message, metadata, options, callback);
        };
    }
}
