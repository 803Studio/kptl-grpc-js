/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: company/company.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../global/headers";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace company {
    export class RegisteredCompanyReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            company?: Company;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("company" in data && data.company != undefined) {
                    this.company = data.company;
                }
            }
        }
        get company() {
            return pb_1.Message.getWrapperField(this, Company, 1) as Company;
        }
        set company(value: Company) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_company() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            company?: ReturnType<typeof Company.prototype.toObject>;
        }): RegisteredCompanyReq {
            const message = new RegisteredCompanyReq({});
            if (data.company != null) {
                message.company = Company.fromObject(data.company);
            }
            return message;
        }
        toObject() {
            const data: {
                company?: ReturnType<typeof Company.prototype.toObject>;
            } = {};
            if (this.company != null) {
                data.company = this.company.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_company)
                writer.writeMessage(1, this.company, () => this.company.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisteredCompanyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisteredCompanyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.company, () => message.company = Company.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisteredCompanyReq {
            return RegisteredCompanyReq.deserialize(bytes);
        }
    }
    export class Company extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            companyName?: string;
            companyLocation?: string;
            isVip?: number;
            isCertified?: number;
            registerTime?: number;
            updateTime?: number;
            industry?: string;
            companyId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("companyName" in data && data.companyName != undefined) {
                    this.companyName = data.companyName;
                }
                if ("companyLocation" in data && data.companyLocation != undefined) {
                    this.companyLocation = data.companyLocation;
                }
                if ("isVip" in data && data.isVip != undefined) {
                    this.isVip = data.isVip;
                }
                if ("isCertified" in data && data.isCertified != undefined) {
                    this.isCertified = data.isCertified;
                }
                if ("registerTime" in data && data.registerTime != undefined) {
                    this.registerTime = data.registerTime;
                }
                if ("updateTime" in data && data.updateTime != undefined) {
                    this.updateTime = data.updateTime;
                }
                if ("industry" in data && data.industry != undefined) {
                    this.industry = data.industry;
                }
                if ("companyId" in data && data.companyId != undefined) {
                    this.companyId = data.companyId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get companyName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set companyName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get companyLocation() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set companyLocation(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isVip() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set isVip(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get isCertified() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set isCertified(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get registerTime() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set registerTime(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get updateTime() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set updateTime(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get industry() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set industry(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get companyId() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set companyId(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            companyName?: string;
            companyLocation?: string;
            isVip?: number;
            isCertified?: number;
            registerTime?: number;
            updateTime?: number;
            industry?: string;
            companyId?: number;
        }): Company {
            const message = new Company({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.companyName != null) {
                message.companyName = data.companyName;
            }
            if (data.companyLocation != null) {
                message.companyLocation = data.companyLocation;
            }
            if (data.isVip != null) {
                message.isVip = data.isVip;
            }
            if (data.isCertified != null) {
                message.isCertified = data.isCertified;
            }
            if (data.registerTime != null) {
                message.registerTime = data.registerTime;
            }
            if (data.updateTime != null) {
                message.updateTime = data.updateTime;
            }
            if (data.industry != null) {
                message.industry = data.industry;
            }
            if (data.companyId != null) {
                message.companyId = data.companyId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                companyName?: string;
                companyLocation?: string;
                isVip?: number;
                isCertified?: number;
                registerTime?: number;
                updateTime?: number;
                industry?: string;
                companyId?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.companyName != null) {
                data.companyName = this.companyName;
            }
            if (this.companyLocation != null) {
                data.companyLocation = this.companyLocation;
            }
            if (this.isVip != null) {
                data.isVip = this.isVip;
            }
            if (this.isCertified != null) {
                data.isCertified = this.isCertified;
            }
            if (this.registerTime != null) {
                data.registerTime = this.registerTime;
            }
            if (this.updateTime != null) {
                data.updateTime = this.updateTime;
            }
            if (this.industry != null) {
                data.industry = this.industry;
            }
            if (this.companyId != null) {
                data.companyId = this.companyId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.companyName.length)
                writer.writeString(2, this.companyName);
            if (this.companyLocation.length)
                writer.writeString(3, this.companyLocation);
            if (this.isVip != 0)
                writer.writeInt32(4, this.isVip);
            if (this.isCertified != 0)
                writer.writeInt32(5, this.isCertified);
            if (this.registerTime != 0)
                writer.writeInt64(6, this.registerTime);
            if (this.updateTime != 0)
                writer.writeInt64(7, this.updateTime);
            if (this.industry.length)
                writer.writeString(8, this.industry);
            if (this.companyId != 0)
                writer.writeInt32(9, this.companyId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Company {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Company();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.companyName = reader.readString();
                        break;
                    case 3:
                        message.companyLocation = reader.readString();
                        break;
                    case 4:
                        message.isVip = reader.readInt32();
                        break;
                    case 5:
                        message.isCertified = reader.readInt32();
                        break;
                    case 6:
                        message.registerTime = reader.readInt64();
                        break;
                    case 7:
                        message.updateTime = reader.readInt64();
                        break;
                    case 8:
                        message.industry = reader.readString();
                        break;
                    case 9:
                        message.companyId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Company {
            return Company.deserialize(bytes);
        }
    }
    export class CommonCompanyReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): CommonCompanyReq {
            const message = new CommonCompanyReq({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommonCompanyReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommonCompanyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommonCompanyReq {
            return CommonCompanyReq.deserialize(bytes);
        }
    }
    export class CommonResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
        }): CommonResponse {
            const message = new CommonResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommonResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommonResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommonResponse {
            return CommonResponse.deserialize(bytes);
        }
    }
    export class FindCompanyByNameReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            index?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            index?: number;
            size?: number;
        }): FindCompanyByNameReq {
            const message = new FindCompanyByNameReq({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                index?: number;
                size?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.index != 0)
                writer.writeInt32(2, this.index);
            if (this.size != 0)
                writer.writeInt32(3, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindCompanyByNameReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindCompanyByNameReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.index = reader.readInt32();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindCompanyByNameReq {
            return FindCompanyByNameReq.deserialize(bytes);
        }
    }
    export class FindAllCompaniesReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            index?: number;
            size?: number;
        }): FindAllCompaniesReq {
            const message = new FindAllCompaniesReq({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                size?: number;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeInt32(1, this.index);
            if (this.size != 0)
                writer.writeInt32(2, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindAllCompaniesReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindAllCompaniesReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readInt32();
                        break;
                    case 2:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindAllCompaniesReq {
            return FindAllCompaniesReq.deserialize(bytes);
        }
    }
    export class CommonCompanyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
            companies?: Company[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("companies" in data && data.companies != undefined) {
                    this.companies = data.companies;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get companies() {
            return pb_1.Message.getRepeatedWrapperField(this, Company, 2) as Company[];
        }
        set companies(value: Company[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            companies?: ReturnType<typeof Company.prototype.toObject>[];
        }): CommonCompanyResponse {
            const message = new CommonCompanyResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            if (data.companies != null) {
                message.companies = data.companies.map(item => Company.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
                companies?: ReturnType<typeof Company.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.companies != null) {
                data.companies = this.companies.map((item: Company) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.companies.length)
                writer.writeRepeatedMessage(2, this.companies, (item: Company) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommonCompanyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommonCompanyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.companies, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Company.deserialize(reader), Company));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommonCompanyResponse {
            return CommonCompanyResponse.deserialize(bytes);
        }
    }
    export class FindCompanyByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.global.ResponseHeader;
            company?: Company;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("company" in data && data.company != undefined) {
                    this.company = data.company;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.global.ResponseHeader, 1) as dependency_1.global.ResponseHeader;
        }
        set header(value: dependency_1.global.ResponseHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get company() {
            return pb_1.Message.getWrapperField(this, Company, 2) as Company;
        }
        set company(value: Company) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_company() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
            company?: ReturnType<typeof Company.prototype.toObject>;
        }): FindCompanyByIdResponse {
            const message = new FindCompanyByIdResponse({});
            if (data.header != null) {
                message.header = dependency_1.global.ResponseHeader.fromObject(data.header);
            }
            if (data.company != null) {
                message.company = Company.fromObject(data.company);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.global.ResponseHeader.prototype.toObject>;
                company?: ReturnType<typeof Company.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.company != null) {
                data.company = this.company.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_company)
                writer.writeMessage(2, this.company, () => this.company.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindCompanyByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindCompanyByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.global.ResponseHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.company, () => message.company = Company.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindCompanyByIdResponse {
            return FindCompanyByIdResponse.deserialize(bytes);
        }
    }
    export class FindCompanyByIndustryReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            industry?: string;
            index?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("industry" in data && data.industry != undefined) {
                    this.industry = data.industry;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get industry() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set industry(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            industry?: string;
            index?: number;
            size?: number;
        }): FindCompanyByIndustryReq {
            const message = new FindCompanyByIndustryReq({});
            if (data.industry != null) {
                message.industry = data.industry;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                industry?: string;
                index?: number;
                size?: number;
            } = {};
            if (this.industry != null) {
                data.industry = this.industry;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.industry.length)
                writer.writeString(1, this.industry);
            if (this.index != 0)
                writer.writeInt32(2, this.index);
            if (this.size != 0)
                writer.writeInt32(3, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindCompanyByIndustryReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindCompanyByIndustryReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.industry = reader.readString();
                        break;
                    case 2:
                        message.index = reader.readInt32();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindCompanyByIndustryReq {
            return FindCompanyByIndustryReq.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCompanyServiceService {
        static definition = {
            registeredCompany: {
                path: "/company.CompanyService/registeredCompany",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Company) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Company.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonResponse.deserialize(new Uint8Array(bytes))
            },
            updateCompany: {
                path: "/company.CompanyService/updateCompany",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisteredCompanyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisteredCompanyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonResponse.deserialize(new Uint8Array(bytes))
            },
            findCompanyByName: {
                path: "/company.CompanyService/findCompanyByName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindCompanyByNameReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindCompanyByNameReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonCompanyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonCompanyResponse.deserialize(new Uint8Array(bytes))
            },
            findCompanyById: {
                path: "/company.CompanyService/findCompanyById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CommonCompanyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CommonCompanyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FindCompanyByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FindCompanyByIdResponse.deserialize(new Uint8Array(bytes))
            },
            findAllCompanies: {
                path: "/company.CompanyService/findAllCompanies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindAllCompaniesReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindAllCompaniesReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonCompanyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonCompanyResponse.deserialize(new Uint8Array(bytes))
            },
            boundCompany: {
                path: "/company.CompanyService/boundCompany",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CommonCompanyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CommonCompanyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonResponse.deserialize(new Uint8Array(bytes))
            },
            verifyCompany: {
                path: "/company.CompanyService/verifyCompany",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CommonCompanyReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CommonCompanyReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonResponse.deserialize(new Uint8Array(bytes))
            },
            findCompanyByIndustry: {
                path: "/company.CompanyService/findCompanyByIndustry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindCompanyByIndustryReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindCompanyByIndustryReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommonCompanyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommonCompanyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract registeredCompany(call: grpc_1.ServerUnaryCall<Company, CommonResponse>, callback: grpc_1.sendUnaryData<CommonResponse>): void;
        abstract updateCompany(call: grpc_1.ServerUnaryCall<RegisteredCompanyReq, CommonResponse>, callback: grpc_1.sendUnaryData<CommonResponse>): void;
        abstract findCompanyByName(call: grpc_1.ServerUnaryCall<FindCompanyByNameReq, CommonCompanyResponse>, callback: grpc_1.sendUnaryData<CommonCompanyResponse>): void;
        abstract findCompanyById(call: grpc_1.ServerUnaryCall<CommonCompanyReq, FindCompanyByIdResponse>, callback: grpc_1.sendUnaryData<FindCompanyByIdResponse>): void;
        abstract findAllCompanies(call: grpc_1.ServerUnaryCall<FindAllCompaniesReq, CommonCompanyResponse>, callback: grpc_1.sendUnaryData<CommonCompanyResponse>): void;
        abstract boundCompany(call: grpc_1.ServerUnaryCall<CommonCompanyReq, CommonResponse>, callback: grpc_1.sendUnaryData<CommonResponse>): void;
        abstract verifyCompany(call: grpc_1.ServerUnaryCall<CommonCompanyReq, CommonResponse>, callback: grpc_1.sendUnaryData<CommonResponse>): void;
        abstract findCompanyByIndustry(call: grpc_1.ServerUnaryCall<FindCompanyByIndustryReq, CommonCompanyResponse>, callback: grpc_1.sendUnaryData<CommonCompanyResponse>): void;
    }
    export class CompanyServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCompanyServiceService.definition, "CompanyService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        registeredCompany: GrpcUnaryServiceInterface<Company, CommonResponse> = (message: Company, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, callback?: grpc_1.requestCallback<CommonResponse>): grpc_1.ClientUnaryCall => {
            return super.registeredCompany(message, metadata, options, callback);
        };
        updateCompany: GrpcUnaryServiceInterface<RegisteredCompanyReq, CommonResponse> = (message: RegisteredCompanyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, callback?: grpc_1.requestCallback<CommonResponse>): grpc_1.ClientUnaryCall => {
            return super.updateCompany(message, metadata, options, callback);
        };
        findCompanyByName: GrpcUnaryServiceInterface<FindCompanyByNameReq, CommonCompanyResponse> = (message: FindCompanyByNameReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, callback?: grpc_1.requestCallback<CommonCompanyResponse>): grpc_1.ClientUnaryCall => {
            return super.findCompanyByName(message, metadata, options, callback);
        };
        findCompanyById: GrpcUnaryServiceInterface<CommonCompanyReq, FindCompanyByIdResponse> = (message: CommonCompanyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FindCompanyByIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FindCompanyByIdResponse>, callback?: grpc_1.requestCallback<FindCompanyByIdResponse>): grpc_1.ClientUnaryCall => {
            return super.findCompanyById(message, metadata, options, callback);
        };
        findAllCompanies: GrpcUnaryServiceInterface<FindAllCompaniesReq, CommonCompanyResponse> = (message: FindAllCompaniesReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, callback?: grpc_1.requestCallback<CommonCompanyResponse>): grpc_1.ClientUnaryCall => {
            return super.findAllCompanies(message, metadata, options, callback);
        };
        boundCompany: GrpcUnaryServiceInterface<CommonCompanyReq, CommonResponse> = (message: CommonCompanyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, callback?: grpc_1.requestCallback<CommonResponse>): grpc_1.ClientUnaryCall => {
            return super.boundCompany(message, metadata, options, callback);
        };
        verifyCompany: GrpcUnaryServiceInterface<CommonCompanyReq, CommonResponse> = (message: CommonCompanyReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonResponse>, callback?: grpc_1.requestCallback<CommonResponse>): grpc_1.ClientUnaryCall => {
            return super.verifyCompany(message, metadata, options, callback);
        };
        findCompanyByIndustry: GrpcUnaryServiceInterface<FindCompanyByIndustryReq, CommonCompanyResponse> = (message: FindCompanyByIndustryReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CommonCompanyResponse>, callback?: grpc_1.requestCallback<CommonCompanyResponse>): grpc_1.ClientUnaryCall => {
            return super.findCompanyByIndustry(message, metadata, options, callback);
        };
    }
}
